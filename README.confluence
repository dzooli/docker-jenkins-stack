h1. Setting up a Jenkins playgroud

h2. Purpose of this document

I have created this short tutorial for anyone who wants to test, improve knowledge, try something new about Jenkins CI/CD v2. The setup contains a Jenkins server a basic worker node and a PyTest capable worker node.

h2. Steps to complete

# Setup a Jenkins server node
# Add a simple worker node
# Add a Python capable worker node
# Create build steps# Clone test repository from GitHub
# # Install requirements
# # Run a simple test case with PyTest
# Create the build pipeline
# Run the pipeline
# Investigate further improvement possibilities

h2. Requirements

* Docker Desktop installed
* Internet connection
* basic knowledge about Docker
* some understanding of Docker compose and docker-compose.yml file structure

h2. Used tools and Docker images

h3. Docker images

* jenkins/jenkins as the server
* jenkins/inbound-agent as the base of the worker nodes

h3. Tools

* Your favorite text editor
* A CLI utility or the embedded terminal in VS Code

h2. Let&#39;s start

h3. The Jenkins server node

We are using Docker compose to create the necessary services. First is the Jenkins server:

{code:language=|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
version: "3"

services:
  jenkins:
    image: jenkins/jenkins:lts-jdk11 # or bitnami/jenkins:latest
    ports:
      - "8050:8080"
      - "8043:8443" # For Bitnami container using HTTPS
      # - '50000:50000' # Enable JNLP (Java Network Launch Protocol) port if you want to attach external workers using host networking
    volumes:
      - "jenkins_home:/var/jenkins_home"
      # - './server-scripts:/usr/share/jenkins/ref'
    environment:
      JENKINS_HOME: /var/jenkins_home # For Bitnami
    networks:
      - jenkins-network
{code}

As the JNLP port is not exposed by default we are able to reach the JNLP functionality from inside {{jenkins-network}} only. After starting the stack with:

{code:language=bash|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
docker-compose up --build
{code}

the server will be available on [http://localhost:8050/|https://localhost:8050/]

and we can unlock the UI by copying the administrator password appeared on the container&#39;s console. Next we could create a real admin user and initialize the plugins if necessary (recommended). If the plugin installation fails first time try it again.

!doc/images/001_plugins.png!

After completion of the initialization we are able to add nodes and setup the enviromnent in the following way. Here is the initial dashboard of our brand new Jenkins:

!doc/images/002_dashboard.png!

h3. Setup the worker nodes

h4. Base node

Now we are able to setup the worker nodes. Click on *Set up an agent* button then configure the first agent as you see below:

!doc/images/003_nodecreate.png!

!doc/images/004_workernode.png!

h4. Python node

Like in the previous step setup another agent but add a {{python}} label separated by space. Also increase the &#39;Number of executors&#39; value at least to 3.

h3. Add the worker nodes to the stack

h4. Base node

Add two new sections to your {{docker-compose.yml}}. First for the base node:

{code:language=|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
node1:
  build:
    context: ./nodes/base-worker
    dockerfile: Dockerfile
  environment:
    JENKINS_URL: http://jenkins:8080
    JENKINS_AGENT_NAME: worker1-base
    JENKINS_SECRET: # include your key from the Jenkins server and restart the stack - the worker should be connected to Jenkins server
  networks:
    - jenkins-network
{code}

Your {{nodes/base-worker}} directory should contain these files:

* A {{Dockerfile}}
* {code:language=|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
* ARG JENKINS_AGENT_NAME
* ARG JENKINS_URL
* ARG JENKINS_SECRET
* FROM jenkinsci/jnlp-slave
* USER jenkins
* COPY --chown=jenkins:jenkins ./* .
* RUN chmod 700 ./entrypoint.sh
* ENTRYPOINT ["./entrypoint.sh"]
* {code}
* And the {{entrypoint.sh}} - we need to wait some time before starting the agent for the complete server initialization.
* {code:language=bash|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
* #!/bin/bash
* echo "Waiting for the server..."
* sleep 30
* echo "Staring the agent..."
* /usr/local/bin/jenkins-agent \
*     -url ${JENKINS_URL} \
*     ${JENKINS_SECRET} \
*     ${JENKINS_AGENT_NAME}
* {code}

h4. Python node

* {{docker-compose.yml}} service addition{code:language=|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
* node2:
* build:
*   context: ./nodes/pytest-worker
*   dockerfile: Dockerfile
* environment:
*   JENKINS_URL: http://jenkins:8080
*   JENKINS_AGENT_NAME: worker2-python
*   JENKINS_SECRET: # insert here
* networks:
*   - jenkins-network
* {code}
* {{Dockerfile}} in {{nodes/pytest-worker}}
* {code:language=|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
* ARG JENKINS_AGENT_NAME
*   ARG JENKINS_URL
*   ARG JENKINS_SECRET
*   FROM jenkins/inbound-agent
*   USER root
*   RUN apt -y update && \
*       apt upgrade -y && \
*       apt install -y python3 python3-pip python3-venv
*   USER jenkins
*   COPY --chown=jenkins:jenkins ./* .
*   RUN chmod 700 ./entrypoint.sh
*   ENTRYPOINT ["./entrypoint.sh"]
* {code}
* {{entrypoint.sh}} in {{nodes/pytest-worker}} is the same as used in the base-node

*Do not forget to insert the node secrets and node names* to the compose file. The secrets are available in Jenkins from *Dashboard =&gt; Manage Jenkins =&gt; Manage Nodes and Clouds* ([Manage Nodes page|http://localhost:8050/computer])

Restart your docker stack with all the created nodes:

{code:language=bash|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
docker compose up --build
{code}

If you experienced strange errors (like &#39;exec format error&#39;) and edited the files using Windows try to convert line endings to LF in the *.sh files with the dos2unix utility.

After successful start of the stack login to the Jenkins server again. On the dashboard you will see the connected workers under the *Build Executor Status* section on the sidebar.

Now we completed the server and node setup. Let&#39;s create the build steps.

h3. Build step definitions

*General recommendation*: Use underscores instead of spaces or do not use spaces in the job names. Your life will be easier without spaces.

h4. Clone source repository step

On the dashboard of Jenkins click the *Create a job* button and name the Job as _CloneTests_. Select *Freestyle project*.

Restrict the build for our Python-capable node by checking *Restrict where this project can be run* checkbox and selecting the *python* node from the dropdown list:

!doc/images/005_restrict.png!

This build step should be used in a pipeline so we will to set it as parametrized build and add the parameter like this:

!doc/images/006_parameters.png!

Configure the Git repository in the *Source Code Management* section:

!/doc/images/007_repo.png!

In the *Build Environment* section check *Delete workspace before build starts* and save the job.

Go forward with the preparation step.

h4. Create Python Virtual Environment step

Create another parametrized *Freestyle Job* named _PythonVenvInit_ similar to the previous but without source code management.

Declare the parameter name as *VENV_WORKSPACE_DIR* which should be used in the build process.

Add a build step *Execute Shell* and use this small script to create the python virtual environment and install the dependencies:

{code:language=bash|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
#!/bin/bash
cd ../${VENV_WORKSPACE_DIR}
python3 -m venv venv
source venv/bin/activate
pip3 install -r requirements.txt
{code}

h4. Install dependencies step

Create the preparation step as a *Freestyle Job* named _PythonVenvTestRun_ with same parameters and also restricted to the python node with the following *Execute Shell* build step:

{code:language=bash|borderStyle=solid|theme=RDark|linenumbers=true|collapse=false}
#!/bin/bash
cd ../$VENV_WORKSPACE_DIR
source venv/bin/activate
pytest -v
{code}

h3. Pipeline definition

In this final step we should use the previously defined building blocks to define the pipeline.

Create a new *Pipeline* job named _RunMainTests_, set it to parametrized and add two string parameters: _GIT_REPO_ and _VENV_WORKSPACE_DIR_ with default values used in the previous step defintions.

In the pipeline section select *Pipeline script* and add the following snippet to the textarea:

{code:language=ruby|borderStyle=solid|theme=RDark|linenumbers=true|collapse=true}
pipeline {
    agent {label 'python'}
    stages {
        stage('Clone') {
            steps {
                build job: 'CloneTests',
                parameters: [string(name: 'GIT_REPO', value: params.GIT_REPO)]
            }
        }
        stage ('Init') {
            steps {
                build job: 'PythonVenvInit',
                parameters: [string(name: 'VENV_WORKSPACE_DIR', value: params.VENV_WORKSPACE_DIR)]
            }
        }
        stage('Test') {
            steps {
                build job: 'PythonVenvTestRun',
                parameters: [string(name: 'VENV_WORKSPACE_DIR', value: params.VENV_WORKSPACE_DIR)]
            }
        }
    }
}
{code}

h3. Starting the pipeline

On the Jenkins dashboard view you can start the pipeline by clicking on the green play button at the end of the table rows.

!doc/images/008_build.png!

h3. Final words

Finally we are ready to automate the world but the path is really long. Don&#39;t worry, an 1000 step long path is also starting with the first step.

h2. Further improvement ideas

* Secure the Jenkins server with HTTPS
* Use folders for job organization (*Folder* type on the job creation page)
* Define more reusable jobs
* Explore the world of Jenkins plugins (tons of existing plugins are in the world)
* Use dynamic worker node creation by automating the Jenkins itself.
* Explore the Jenkins API

h2. References and Links

* [https://www.jenkins.io/doc/book/pipeline/syntax/|https://www.jenkins.io/doc/book/pipeline/syntax/]
* [https://www.jenkins.io/doc/book/using/|https://www.jenkins.io/doc/book/using/]
* [https://docs.oracle.com/javase/tutorial/deployment/deploymentInDepth/jnlp.html|https://docs.oracle.com/javase/tutorial/deployment/deploymentInDepth/jnlp.html]

